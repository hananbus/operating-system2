diff --git a/Makefile b/Makefile
index 328f9c6..54542aa 100644
--- a/Makefile
+++ b/Makefile
@@ -28,7 +28,8 @@ OBJS = \
   $K/sysfile.o \
   $K/kernelvec.o \
   $K/plic.o \
-  $K/virtio_disk.o
+  $K/virtio_disk.o\
+  $K/cas.o
 
 # riscv64-unknown-elf- or riscv64-linux-gnu-
 # perhaps in /opt/riscv/bin
@@ -62,6 +63,7 @@ CFLAGS += -mcmodel=medany
 CFLAGS += -ffreestanding -fno-common -nostdlib -mno-relax
 CFLAGS += -I.
 CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
+CFLAGS += -D $(BLNCFLG)
 
 # Disable PIE when possible (for Ubuntu 16.10 toolchain)
 ifneq ($(shell $(CC) -dumpspecs 2>/dev/null | grep -e '[^f]no-pie'),)
@@ -70,6 +72,9 @@ endif
 ifneq ($(shell $(CC) -dumpspecs 2>/dev/null | grep -e '[^f]nopie'),)
 CFLAGS += -fno-pie -nopie
 endif
+ifndef BLNCFLG
+BLNCFLG := OFF
+endif
 
 LDFLAGS = -z max-page-size=4096
 
@@ -132,6 +137,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_test\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +159,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 6
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/cas.S b/kernel/cas.S
new file mode 100644
index 0000000..a741519
--- /dev/null
+++ b/kernel/cas.S
@@ -0,0 +1,9 @@
+.global cas
+cas:
+    lr.w t0, (a0) 
+    bne t0, a1, fail 
+    sc.w a0, a2, (a0) 
+    jr ra
+fail:
+    li a0, 1
+    jr ra 
\ No newline at end of file
diff --git a/kernel/defs.h b/kernel/defs.h
index 3564db4..a7672ea 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -104,6 +104,9 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             get_cpu(void);
+int             set_cpu(int);
+int             cpu_proccess_count(int);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/proc.c b/kernel/proc.c
index 22e7ce4..73678d6 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -10,16 +10,151 @@ struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
 
+int p_index;
+int sleeping_list;
+int zombie_list;
+int unused_list;
+struct spinlock sleep_lock;
+struct spinlock unused_lock;
+struct spinlock zombie_lock;
+
 struct proc *initproc;
 
 int nextpid = 1;
 struct spinlock pid_lock;
 
+extern uint64 cas(volatile void *addr, int expected, int newval);
 extern void forkret(void);
 static void freeproc(struct proc *p);
 
 extern char trampoline[]; // trampoline.S
 
+int
+find_min_cpu(){
+  int ans = cpus[0].procces_counter;
+  int index = 0;
+  for(int i = 1; i<NCPU; i++){
+    if(cpus[i].valid == 1){
+      if(cpus[i].procces_counter < ans){
+        index = i;
+        ans = cpus[i].procces_counter;
+      }
+    }
+  }
+  return index;
+}
+int
+remove_from_list(int ind, int *p_start, struct spinlock *lk){
+  acquire(lk);
+  int start = *p_start;
+  if(start == -1){
+    release(lk);
+    return 0;
+  }
+
+  if(ind != start){
+    acquire(&(&proc[start])->p_lock);
+    release(lk);
+    int next_p = (&proc[start])->next_p;
+    while(next_p != ind){
+      if(next_p == -1){
+        release(&(&proc[start])->p_lock);
+        return 0;
+      }
+      acquire(&(&proc[next_p])->p_lock);
+      release(&(&proc[start])->p_lock);
+      start = next_p;
+      next_p = (&proc[start])->next_p;
+    }
+    acquire(&(&proc[next_p])->p_lock);
+    (&proc[start])->next_p = (&proc[next_p])->next_p;
+    (&proc[next_p])->next_p = -1;
+    release(&(&proc[start])->p_lock);
+    release(&(&proc[next_p])->p_lock);
+    return 1;
+  }
+  else{
+    acquire(&(&proc[start])->p_lock);
+    release(lk);
+    *p_start = (&proc[start])->next_p;
+    // printf("new start is: %d",*p_start);
+    (&proc[start])->next_p = -1;
+    release(&(&proc[start])->p_lock);
+    return 1;
+  }
+  
+  return 0;
+}
+
+int
+insert_last_proccess(int to_insert, int *p_start, struct spinlock *lk){
+  
+  int start = *p_start;
+  // (&proc[to_insert])->next_p = -1;
+  acquire(lk);
+  if(start != -1){
+    // printf("(insert)\thas list\t to_insert = %d\tstart = %d\n", to_insert, start);
+    acquire(&(&proc[start])->p_lock);
+    release(lk);
+    int next_p = (&proc[start])->next_p;
+    if(next_p == -1){
+      (&proc[start])->next_p = to_insert;
+      release(&(&proc[start])->p_lock);
+      return 1;
+    }
+    while(next_p != -1){
+      acquire(&(&proc[next_p])->p_lock);
+      if((&proc[next_p])->next_p == -1){
+        (&proc[next_p])->next_p = to_insert;
+        release(&(&proc[start])->p_lock);
+        release(&(&proc[next_p])->p_lock);
+        return 1;
+      }
+      else{
+        release(&(&proc[start])->p_lock);
+        start = next_p;
+        next_p = (&proc[start])->next_p;
+      }
+
+
+    }
+  }
+  else{
+    // printf("(insert)\tas head\t");
+    *p_start = to_insert;
+    // printf("updated p_start - %d\n", *p_start);
+    release(lk);
+    return 1;
+  }
+  return 1;
+}
+
+int
+remove_unused(){
+  int start = unused_list;
+  if(start!=-1){
+    unused_list = (&proc[start])->next_p;
+  }
+  return start;
+}
+
+int 
+insert_unused(int to_insert){
+  acquire(&unused_lock);
+  acquire(&(&proc[to_insert])->p_lock);
+  if(unused_list == -1){
+    (&proc[to_insert])->next_p = -1;
+    unused_list = to_insert;
+  }
+  else{
+    (&proc[to_insert])->next_p = unused_list;
+    unused_list = to_insert;
+  }
+  release(&(&proc[to_insert])->p_lock);
+  release(&unused_lock);
+  return 1;
+}
+
 // helps ensure that wakeups of wait()ing
 // parents are not lost. helps obey the
 // memory model when using p->parent.
@@ -48,11 +183,24 @@ procinit(void)
 {
   struct proc *p;
   
+  sleeping_list = -1;
+  zombie_list = -1;
+  unused_list = -1;
+  p_index = 0;
+
+
   initlock(&pid_lock, "nextpid");
   initlock(&wait_lock, "wait_lock");
+
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
       p->kstack = KSTACK((int) (p - proc));
+      p->index = p_index;
+      p_index++;
+      p->next_p = -1;
+      // printf("inser procces %d to unused\n", p->index);
+      insert_last_proccess(p->index, &unused_list, &unused_lock);
+      // printf("now is next %d \n", p->next_p);
   }
 }
 
@@ -88,11 +236,14 @@ myproc(void) {
 int
 allocpid() {
   int pid;
-  
-  acquire(&pid_lock);
-  pid = nextpid;
-  nextpid = nextpid + 1;
-  release(&pid_lock);
+  do{
+    pid = nextpid;
+  } while(cas(&nextpid, pid, pid+1));
+
+  // acquire(&pid_lock);
+  // pid = nextpid;
+  // nextpid = nextpid + 1;
+  // release(&pid_lock);
 
   return pid;
 }
@@ -106,42 +257,45 @@ allocproc(void)
 {
   struct proc *p;
 
-  for(p = proc; p < &proc[NPROC]; p++) {
-    acquire(&p->lock);
-    if(p->state == UNUSED) {
-      goto found;
-    } else {
-      release(&p->lock);
-    }
-  }
-  return 0;
-
-found:
-  p->pid = allocpid();
-  p->state = USED;
 
-  // Allocate a trapframe page.
-  if((p->trapframe = (struct trapframe *)kalloc()) == 0){
-    freeproc(p);
-    release(&p->lock);
+  acquire(&unused_lock);
+  if(unused_list ==-1){
+    release(&unused_lock);
     return 0;
   }
+  else{
+    int p_new = remove_unused();
+    p = &proc[p_new];
+    acquire(&p->lock);
+    release(&unused_lock);
+// found:
+    p->pid = allocpid();
+    p->state = USED;
+    p->next_p = -1;
+
+  // Allocate a trapframe page.
+    if((p->trapframe = (struct trapframe *)kalloc()) == 0){
+      freeproc(p);
+      release(&p->lock);
+      return 0;
+    }
 
   // An empty user page table.
-  p->pagetable = proc_pagetable(p);
-  if(p->pagetable == 0){
-    freeproc(p);
-    release(&p->lock);
-    return 0;
-  }
+    p->pagetable = proc_pagetable(p);
+    if(p->pagetable == 0){
+      freeproc(p);
+      release(&p->lock);
+      return 0;
+    }
 
   // Set up new context to start executing at forkret,
   // which returns to user space.
-  memset(&p->context, 0, sizeof(p->context));
-  p->context.ra = (uint64)forkret;
-  p->context.sp = p->kstack + PGSIZE;
-
-  return p;
+    memset(&p->context, 0, sizeof(p->context));
+    p->context.ra = (uint64)forkret;
+    p->context.sp = p->kstack + PGSIZE;
+    // printf("(allocproc done)\n");
+    return p;
+  }
 }
 
 // free a proc structure and the data hanging from it,
@@ -164,6 +318,20 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  // printf("remove from freeproc\n");
+  // if(remove_from_list(p->index, &zombie_list, &zombie_lock) == 0){
+  //   struct cpu *c = &cpus[p->cpu_id];
+  //   remove_from_list(p->index , &c->runnable_list,&c->c_lock);
+  // }
+  remove_from_list(p->index, &zombie_list, &zombie_lock);
+  insert_last_proccess(p->index, &unused_list, &unused_lock);
+  // insert_unused(p->index);
+  int count;
+  struct cpu* c = &cpus[p->cpu_id];
+  do{
+    count = c->procces_counter;
+    } while(cas(&c->procces_counter, count, count-1));
+  // printf("insert to unused from alloproc\n");
 }
 
 // Create a user page table for a given process,
@@ -243,8 +411,18 @@ userinit(void)
   p->cwd = namei("/");
 
   p->state = RUNNABLE;
-
+  
+  p->cpu_id = 0;
+  // (cpus[p->cpu_id]).runnable_list = p->index;
+  cpus[0].runnable_list = -1;
+  cpus[0].procces_counter = 1;
+  // cpus[p->cpu_id].procces_counter = 0;
+  initlock(&(cpus[p->cpu_id].c_lock), "cpulock");
+  // printf("insert to runnable cpus[%d] fromuserinit", p->cpu_id);
+  insert_last_proccess(p->index, &cpus[p->cpu_id].runnable_list, &cpus[p->cpu_id].c_lock);
+  // printf("userinit added proc[%d] to cpu's list %d\n", p->index, p->cpu_id);
   release(&p->lock);
+
 }
 
 // Grow or shrink user memory by n bytes.
@@ -280,7 +458,6 @@ fork(void)
   if((np = allocproc()) == 0){
     return -1;
   }
-
   // Copy user memory from parent to child.
   if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
     freeproc(np);
@@ -289,6 +466,7 @@ fork(void)
   }
   np->sz = p->sz;
 
+
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
 
@@ -305,14 +483,29 @@ fork(void)
 
   pid = np->pid;
 
+ 
   release(&np->lock);
 
   acquire(&wait_lock);
   np->parent = p;
+  
   release(&wait_lock);
-
+ 
+  
   acquire(&np->lock);
   np->state = RUNNABLE;
+// we added:
+  np->cpu_id = p->cpu_id;
+
+  int index = find_min_cpu();
+  int count;
+  struct cpu* c = &cpus[index];
+  do{
+    count = c->procces_counter;
+    } while(cas(&c->procces_counter, count, count+1));
+  np->cpu_id = index;
+  insert_last_proccess(np->index, &cpus[np->cpu_id].runnable_list, &cpus[np->cpu_id].c_lock);
+
   release(&np->lock);
 
   return pid;
@@ -370,6 +563,10 @@ exit(int status)
 
   p->xstate = status;
   p->state = ZOMBIE;
+  
+  // added:
+  insert_last_proccess(p->index, &zombie_list, &zombie_lock);
+  // till here
 
   release(&wait_lock);
 
@@ -410,6 +607,7 @@ wait(uint64 addr)
           freeproc(np);
           release(&np->lock);
           release(&wait_lock);
+
           return pid;
         }
         release(&np->lock);
@@ -437,33 +635,51 @@ wait(uint64 addr)
 void
 scheduler(void)
 {
+  // printf("scheduler\n");
+
+
   struct proc *p;
   struct cpu *c = mycpu();
-  
   c->proc = 0;
+  c->valid = 1;
+
+  if(cpuid() != 0){
+    c->procces_counter = 0;
+    c->runnable_list = -1;
+  }
   for(;;){
+    // printf("start loop\n");
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
-
-    for(p = proc; p < &proc[NPROC]; p++) {
+    acquire(&c->c_lock);
+    int p_ind = c->runnable_list;
+    
+    if(p_ind != -1){
+      
+      p = &proc[p_ind];
+      release(&c->c_lock);
       acquire(&p->lock);
-      if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
-      }
+      // printf("remove ind %d from runnable\n",p_ind);
+      remove_from_list(p_ind, &c->runnable_list, &c->c_lock);
+      // printf("the new head %d \n", c->runnable_list );
+      p->state = RUNNING;
+      c->proc = p;
+      // printf("before swtch\n");
+      swtch(&c->context, &p->context);
+      // printf("after swtch\n");
+
+      // Process is done running for now.
+      // It should have changed its p->state before coming back.
+      c->proc = 0;
       release(&p->lock);
+      // printf("finish loop\n");
+    }
+    else{
+      release(&c->c_lock);
     }
+    // printf("finish loop\n");
   }
 }
-
 // Switch to scheduler.  Must hold only p->lock
 // and have changed proc->state. Saves and restores
 // intena because intena is a property of this
@@ -495,7 +711,9 @@ sched(void)
 void
 yield(void)
 {
+  // printf("enter yield\n");
   struct proc *p = myproc();
+  insert_last_proccess(p->index, &(cpus[p->cpu_id].runnable_list), &(cpus[p->cpu_id].c_lock));
   acquire(&p->lock);
   p->state = RUNNABLE;
   sched();
@@ -528,6 +746,7 @@ forkret(void)
 void
 sleep(void *chan, struct spinlock *lk)
 {
+  // printf("enter sleep\n");
   struct proc *p = myproc();
   
   // Must acquire p->lock in order to
@@ -536,14 +755,22 @@ sleep(void *chan, struct spinlock *lk)
   // guaranteed that we won't miss any wakeup
   // (wakeup locks p->lock),
   // so it's okay to release lk.
-
   acquire(&p->lock);  //DOC: sleeplock1
+  int count;
+  struct cpu* c = &cpus[p->cpu_id];
+  do{
+    count = c->procces_counter;
+    } while(cas(&c->procces_counter, count, count-1));
+  insert_last_proccess(p->index, &sleeping_list, &sleep_lock);
   release(lk);
 
+  // printf("\ninsert to sleep from sleep\n");
+
+
   // Go to sleep.
   p->chan = chan;
   p->state = SLEEPING;
-
+  
   sched();
 
   // Tidy up.
@@ -559,17 +786,62 @@ sleep(void *chan, struct spinlock *lk)
 void
 wakeup(void *chan)
 {
+  // printf("enter wakeup\n");
   struct proc *p;
 
-  for(p = proc; p < &proc[NPROC]; p++) {
-    if(p != myproc()){
+  int curr = sleeping_list;
+  
+  while(curr!=-1){
+    // printf("aquire1\n");
+    acquire(&sleep_lock);
+    p = &proc[curr];
+    int next = p->next_p;
+    if(p!=myproc()){
+      release(&sleep_lock);
+      // printf("aquire2\n");
       acquire(&p->lock);
-      if(p->state == SLEEPING && p->chan == chan) {
+      if(p->chan == chan){
         p->state = RUNNABLE;
+        // printf("remove from wakeup\n");
+        remove_from_list(p->index, &sleeping_list, &sleep_lock);
+        int index = find_min_cpu();
+        if(index != p->cpu_id){
+          p->cpu_id = index;  
+        int count;
+        struct cpu* c = &cpus[index];
+        do{
+          count = c->procces_counter;
+          } while(cas(&c->procces_counter, count, count+1));
+        }
+        // int count;
+        
+        // struct cpu* c = &cpus[index];
+        // do{
+        //   count = c->procces_counter;
+        //   } while(cas(&c->procces_counter, count, count+1));
+        // p->cpu_id = index;
+        insert_last_proccess(p->index, &(cpus[p->cpu_id].runnable_list), &(cpus[p->cpu_id].c_lock));
       }
+      // printf("curr is %d\n", curr);
+      
       release(&p->lock);
     }
+    else{
+      release(&sleep_lock);
+    }
+    curr = next;
   }
+
+  // for(p = proc; p < &proc[NPROC]; p++) {
+  //   if(p != myproc()){
+  //     acquire(&p->lock);
+  //     if(p->state == SLEEPING && p->chan == chan) {
+  //       p->state = RUNNABLE;
+  //     }
+  //     release(&p->lock);
+  //   }
+  // }
+  // printf("exit wakeup");
 }
 
 // Kill the process with the given pid.
@@ -578,6 +850,7 @@ wakeup(void *chan)
 int
 kill(int pid)
 {
+  // printf("\t\t\t\t\t\t\t\t\tKILLL");
   struct proc *p;
 
   for(p = proc; p < &proc[NPROC]; p++){
@@ -596,6 +869,35 @@ kill(int pid)
   return -1;
 }
 
+
+// new system calls
+int
+get_cpu(){
+  return cpuid();
+}
+
+int
+set_cpu(int cpu_num){
+  if(cpu_num){
+    struct proc *p = myproc();
+    acquire(&p->lock);
+    p->cpu_id = cpu_num;
+    release(&p->lock);
+    yield();
+    return 0;
+  }
+  return -1;
+}
+
+int 
+cpu_proccess_count(int cpu_num){
+  struct cpu* c = &cpus[cpu_num];
+  return c->procces_counter;
+}
+
+
+
+
 // Copy to either a user address, or kernel address,
 // depending on usr_dst.
 // Returns 0 on success, -1 on error.
@@ -653,4 +955,4 @@ procdump(void)
     printf("%d %s %s", p->pid, state, p->name);
     printf("\n");
   }
-}
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index f6ca8b7..b6c4275 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -24,6 +24,10 @@ struct cpu {
   struct context context;     // swtch() here to enter scheduler().
   int noff;                   // Depth of push_off() nesting.
   int intena;                 // Were interrupts enabled before push_off()?
+  int runnable_list;
+  uint64 procces_counter;
+  struct spinlock c_lock;
+  int valid;
 };
 
 extern struct cpu cpus[NCPU];
@@ -93,6 +97,13 @@ struct proc {
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
 
+
+  int index;
+  int next_p;
+  struct spinlock p_lock;
+  int cpu_id;
+
+
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
 
@@ -105,4 +116,4 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
-};
+};
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index c1b3670..80bfaa4 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -104,6 +104,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
+extern uint64 sys_get_cpu(void);
+extern uint64 sys_set_cpu(void);
+extern uint64 sys_cpu_proccess_count(void);
 
 static uint64 (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -127,6 +130,9 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_get_cpu] sys_get_cpu,
+[SYS_set_cpu] sys_set_cpu,
+[SYS_cpu_proccess_count]  sys_cpu_proccess_count, 
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..53da944 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_get_cpu 22
+#define SYS_set_cpu 23
+#define SYS_cpu_proccess_count 24
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index e8bcda9..6d82096 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -83,6 +83,28 @@ sys_kill(void)
   return kill(pid);
 }
 
+uint64
+sys_get_cpu(void){
+  return get_cpu();
+}
+
+uint64 
+sys_set_cpu(void){
+  int cpu_num;
+
+  if(argint(0, &cpu_num) < 0)
+    return -1;
+  return set_cpu(cpu_num);
+}
+
+uint64
+sys_cpu_proccess_count(void){
+  int cpu_num;
+
+  if(argint(0, &cpu_num) < 0)
+    return -1;
+  return cpu_proccess_count(cpu_num);
+}
 // return how many clock tick interrupts have occurred
 // since start.
 uint64
diff --git a/user/test.c b/user/test.c
new file mode 100644
index 0000000..789bfc5
--- /dev/null
+++ b/user/test.c
@@ -0,0 +1,15 @@
+#include "kernel/types.h"
+#include "user/user.h"
+#include "kernel/fcntl.h"
+
+
+int main(int argc, char**argv){
+ if(fork() == 0){
+     printf("father cpu: %d\n" , get_cpu());
+ }
+ else{
+     printf("child cpu: %d\n" , get_cpu());
+     printf("num of procces on cpu 0: %d\n cpu 1: %d\n cpu 2: %d\n " , cpu_proccess_count(0),cpu_proccess_count(1),cpu_proccess_count(2));
+ }
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index b71ecda..815f23f 100644
--- a/user/user.h
+++ b/user/user.h
@@ -23,6 +23,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int get_cpu(void);
+int set_cpu(int cpu_num);
+int cpu_proccess_count(int cpu_num);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..c356760 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("get_cpu");
+entry("set_cpu");
+entry("cpu_proccess_count");
